---
- name: Set up leisure tools on Debian 12 VM
  hosts: all
  become: yes
  vars_files:
    - group_vars/all.yml
  tasks:
    - name: Ensure shell for anon is bash (for Ansible compatibility)
      user:
        name: anon
        shell: /bin/bash
      become: true
      tags: always
    - name: Install tfswitch (Terraform version switcher)
      become: false
      shell: |
        set -e
        export TFSWITCH_BIN="$HOME/.tfswitch/bin/tfswitch"
        if ! command -v tfswitch >/dev/null 2>&1; then
          curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash
        fi
        if [ -f "$TFSWITCH_BIN" ]; then
          sudo install -m 0755 "$TFSWITCH_BIN" /usr/local/bin/tfswitch
        fi
      args:
        creates: /usr/local/bin/tfswitch
      tags: tfswitch
    - name: Ensure $HOME/bin is in PATH for zsh
      become: false
      lineinfile:
        path: ~/.zshrc
        regexp: '^export PATH="\$PATH:\$HOME/bin"'
        line: 'export PATH="$PATH:$HOME/bin"'
        insertafter: EOF
      tags: terraform
    - name: Install tfswitch (Terraform version switcher)
      become: false
      shell: |
        set -e
        export TFSWITCH_BIN="$HOME/.tfswitch/bin/tfswitch"
        if ! command -v tfswitch >/dev/null 2>&1; then
          curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash
        fi
        if [ -f "$TFSWITCH_BIN" ]; then
          sudo install -m 0755 "$TFSWITCH_BIN" /usr/local/bin/tfswitch
        fi
      args:
        creates: /usr/local/bin/tfswitch
      tags: tfswitch

    - name: Ensure zsh is installed
      apt:
        name: zsh
        state: present

    - name: Set zsh as default shell for user
      user:
        name: "{{ ansible_ssh_user | default(ansible_user) | default(ansible_user_id) }}"
        shell: /usr/bin/zsh

    - name: Install oh-my-zsh
      become: false
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || true
      args:
        creates: ~/.oh-my-zsh

    - name: Install powerlevel10k theme
      become: false
      git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: ~/.oh-my-zsh/custom/themes/powerlevel10k
        depth: 1

    - name: Ensure powerlevel10k is set in .zshrc
      become: false
      lineinfile:
        path: ~/.zshrc
        regexp: '^ZSH_THEME='
        line: 'ZSH_THEME="{{ zsh_theme }}"'

    - name: Ensure ~/.vim/autoload directory exists
      become: false
      file:
        path: ~/.vim/autoload
        state: directory
        mode: '0755'

    - name: Install vim-plug for Vim plugin management
      become: false
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: ~/.vim/autoload/plug.vim
        mode: '0644'

    - name: Ensure ~/.vimrc exists
      become: false
      file:
        path: ~/.vimrc
        state: touch
        mode: '0644'

    - name: Remove old blockinfile markers from .vimrc
      become: false
      replace:
        path: ~/.vimrc
        regexp: '^(;;|,,) (BEGIN|END) ANSIBLE MANAGED BLOCK for vim-plug$'
        replace: ''

    - name: Remove all previous plug#begin/plug#end blocks from .vimrc
      become: false
      replace:
        path: ~/.vimrc
        regexp: 'call plug#begin\([^)]*\)[\s\S]*?call plug#end\(\)'
        replace: ''

    - name: Ensure ~/.vim/pack/plugins/start directory exists
      become: false
      file:
        path: ~/.vim/pack/plugins/start
        state: directory
        mode: '0755'

    - name: Install ALE using Vim native package system
      become: false
      git:
        repo: https://github.com/dense-analysis/ale.git
        dest: ~/.vim/pack/plugins/start/ale
        update: yes

    - name: Ensure .vimrc has basic vim-plug config
      become: false
      blockinfile:
        path: ~/.vimrc
        marker: '" {mark} ANSIBLE MANAGED BLOCK for vim-plug'
        block: |
          call plug#begin('~/.vim/plugged')
          {% for plugin in vim_plugins if plugin != 'dense-analysis/ale' %}
          Plug '{{ plugin }}'
          {% endfor %}
          call plug#end()
          set rtp+=~/.vim/autoload

    - name: Ensure .vimrc has ALE and general Vim config
      become: false
      blockinfile:
        path: ~/.vimrc
        marker: '" {mark} ANSIBLE MANAGED BLOCK for vim/ale config'
        block: |
          set number
          let g:ale_linters_explicit = 1
          let g:ale_fix_on_save = 1
          let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace'], 'python': ['black', 'isort'], 'sh': ['shfmt']}
          let g:ale_linters = {'python': ['flake8', 'mypy'], 'sh': ['shellcheck']}
          let g:ale_sign_error = '✗'
          let g:ale_sign_warning = '⚠'
          let g:ale_virtualtext_cursor = 1

    - name: Force Vim plugin installation with PlugInstall
      become: false
      shell: |
        vim -E -s +PlugInstall +qall
      args:
        creates: ~/.vim/plugged/ale
      ignore_errors: true

    - name: Install Python and shell linters/formatters for ALE
      apt:
        name: "{{ ['python3-pip'] + shell_linters }}"
        state: present

    - name: Install Python linters/formatters with pip (allow system install)
      pip:
        name: "{{ python_linters }}"
        executable: pip3
        extra_args: --break-system-packages

    - name: Install pipenv (allow system install)
      pip:
        name:
          - pipenv
        executable: pip3
        extra_args: --break-system-packages

    - name: Install pyenv dependencies and clone pyenv
      apt:
        name: "{{ pyenv_dependencies }}"
        state: present

    - name: Clone pyenv repository
      become: false
      git:
        repo: 'https://github.com/pyenv/pyenv.git'
        dest: ~/.pyenv
        update: yes

    - name: Install NVM (Node Version Manager)
      become: false
      shell: |
        export NVM_DIR="$HOME/.nvm"
        if [ ! -d "$NVM_DIR" ]; then
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        fi
      args:
        creates: ~/.nvm

    - name: Ensure default directories exist in user's home
      become: false
      file:
        path: "~/{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ user_dirs }}"

    - name: Remove all empty parentheses lines from .vimrc
      become: false
      replace:
        path: ~/.vimrc
        regexp: '^\(\)\s*$'
        replace: ''
